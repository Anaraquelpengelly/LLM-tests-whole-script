/* * SPDX-FileCopyrightText: Copyright Â© 2021 WebGoat authors * SPDX-License-Identifier: GPL-2.0-or-later */package org.owasp.webgoat.lessons.spoofcookie;import static org.owasp.webgoat.container.assignments.AttackResultBuilder.failed;import static org.owasp.webgoat.container.assignments.AttackResultBuilder.informationMessage;import static org.owasp.webgoat.container.assignments.AttackResultBuilder.success;import jakarta.servlet.http.Cookie;import jakarta.servlet.http.HttpServletResponse;import java.util.Map;import org.apache.commons.lang3.StringUtils;import org.owasp.webgoat.container.assignments.AssignmentEndpoint;import org.owasp.webgoat.container.assignments.AssignmentHints;import org.owasp.webgoat.container.assignments.AttackResult;import org.owasp.webgoat.lessons.spoofcookie.encoders.EncDec;import org.springframework.web.bind.UnsatisfiedServletRequestParameterException;import org.springframework.web.bind.annotation.CookieValue;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;@AssignmentHints({"spoofcookie.hint1", "spoofcookie.hint2", "spoofcookie.hint3"})@RestControllerpublic class SpoofCookieAssignment implements AssignmentEndpoint {  private static final String COOKIE_NAME = "spoof_auth";  private static final String COOKIE_INFO =      "Cookie details for user %s:<br />" + COOKIE_NAME + "=%s";  private static final String ATTACK_USERNAME = "tom";  private static final Map<String, String> users =      Map.of("webgoat", "webgoat", "admin", "admin", ATTACK_USERNAME, "apasswordfortom");  @PostMapping(path = "/SpoofCookie/login")  @ResponseBody  @ExceptionHandler(UnsatisfiedServletRequestParameterException.class)  public AttackResult login(      @RequestParam String username,      @RequestParam String password,      @CookieValue(value = COOKIE_NAME, required = false) String cookieValue,      HttpServletResponse response) {    if (StringUtils.isEmpty(cookieValue)) {      return credentialsLoginFlow(username, password, response);    } else {      return cookieLoginFlow(cookieValue);    }  }  @GetMapping(path = "/SpoofCookie/cleanup")  public void cleanup(HttpServletResponse response) {    Cookie cookie = new Cookie(COOKIE_NAME, "");    cookie.setMaxAge(0);    cookie.setHttpOnly(true);    response.addCookie(cookie);  }  private AttackResult credentialsLoginFlow(      String username, String password, HttpServletResponse response) {    String lowerCasedUsername = username.toLowerCase();    if (ATTACK_USERNAME.equals(lowerCasedUsername)        && users.get(lowerCasedUsername).equals(password)) {      return informationMessage(this).feedback("spoofcookie.cheating").build();    }    String authPassword = users.getOrDefault(lowerCasedUsername, "");    if (!authPassword.isBlank() && authPassword.equals(password)) {      String newCookieValue = EncDec.encode(lowerCasedUsername);      Cookie newCookie = new Cookie(COOKIE_NAME, newCookieValue);      newCookie.setPath("/WebGoat");      newCookie.setSecure(true);      newCookie.setHttpOnly(true);      response.addCookie(newCookie);      return informationMessage(this)          .feedback("spoofcookie.login")          .output(String.format(COOKIE_INFO, lowerCasedUsername, newCookie.getValue()))          .build();