/* * SPDX-FileCopyrightText: Copyright Â© 2018 WebGoat authors * SPDX-License-Identifier: GPL-2.0-or-later */package org.owasp.webgoat.lessons.jwt;import static org.assertj.core.api.Assertions.assertThat;import static org.hamcrest.Matchers.containsString;import static org.hamcrest.Matchers.is;import static org.owasp.webgoat.lessons.jwt.JWTVotesEndpoint.JWT_PASSWORD;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.cookie;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;import com.fasterxml.jackson.databind.ObjectMapper;import io.jsonwebtoken.Claims;import io.jsonwebtoken.Jwts;import jakarta.servlet.http.Cookie;import java.util.Map;import org.hamcrest.CoreMatchers;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.owasp.webgoat.WithWebGoatUser;import org.owasp.webgoat.container.plugins.LessonTest;import org.springframework.http.MediaType;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;@WithWebGoatUserpublic class JWTVotesEndpointTest extends LessonTest {  @BeforeEach  public void setup() {    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();  }  @Test  public void solveAssignment() throws Exception {    // Create new token and set alg to none and do not sign it    Claims claims = Jwts.claims();    claims.put("admin", "true");    claims.put("user", "Tom");    String token = Jwts.builder().setClaims(claims).signWith(io.jsonwebtoken.SignatureAlgorithm.HS512, JWT_PASSWORD).compact();    // Call the reset endpoint    mockMvc        .perform(            MockMvcRequestBuilders.post("/JWT/votings")                .contentType(MediaType.APPLICATION_JSON)                .cookie(new Cookie("access_token", token)))        .andExpect(status().isOk())        .andExpect(jsonPath("$.lessonCompleted", is(true)));  }  @Test  public void solveAssignmentWithBoolean() throws Exception {    // Create new token and set alg to none and do not sign it    Claims claims = Jwts.claims();    claims.put("admin", true);    claims.put("user", "Tom");    String token = Jwts.builder().setClaims(claims).signWith(io.jsonwebtoken.SignatureAlgorithm.HS512, JWT_PASSWORD).compact();    // Call the reset endpoint    mockMvc        .perform(            MockMvcRequestBuilders.post("/JWT/votings")                .contentType(MediaType.APPLICATION_JSON)                .cookie(new Cookie("access_token", token)))        .andExpect(status().isOk())        .andExpect(jsonPath("$.lessonCompleted", is(true)));  }  @Test  public void resetWithoutTokenShouldNotWork() throws Exception {    mockMvc        .perform(            MockMvcRequestBuilders.post("/JWT/votings").contentType(MediaType.APPLICATION_JSON))        .andExpect(status().isOk())        .andExpect(            jsonPath("$.feedback", CoreMatchers.is(messages.getMessage("jwt-invalid-token"))));  }  @Test  public void guestShouldNotGetAToken() throws Exception {    mockMvc        .perform(            MockMvcRequestBuilders.get("/JWT/votings/login")                .contentType(MediaType.APPLICATION_JSON)                .param("user", "Guest"))        .andExpect(status().isUnauthorized())        .andExpect(cookie().