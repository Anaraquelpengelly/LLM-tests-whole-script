/* * SPDX-FileCopyrightText: Copyright Â© 2018 WebGoat authors * SPDX-License-Identifier: GPL-2.0-or-later */package org.owasp.webgoat.lessons.jwt;import static org.hamcrest.Matchers.is;import static org.owasp.webgoat.lessons.jwt.JWTRefreshEndpoint.PASSWORD;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;import com.fasterxml.jackson.databind.ObjectMapper;import io.jsonwebtoken.Jwts;import java.util.HashMap;import java.util.Map;import org.hamcrest.CoreMatchers;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.owasp.webgoat.WithWebGoatUser;import org.owasp.webgoat.container.plugins.LessonTest;import org.springframework.http.MediaType;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;@WithWebGoatUserpublic class JWTRefreshEndpointTest extends LessonTest {  @BeforeEach  void setup() {    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();  }  @Test  void solveAssignment() throws Exception {    ObjectMapper objectMapper = new ObjectMapper();    // First login to obtain tokens for Jerry    var loginJson = Map.of("user", "Jerry", "password", PASSWORD);    MvcResult result =        mockMvc            .perform(                MockMvcRequestBuilders.post("/JWT/refresh/login")                    .contentType(MediaType.APPLICATION_JSON)                    .content(objectMapper.writeValueAsString(loginJson)))            .andExpect(status().isOk())            .andReturn();    Map<String, String> tokens =        objectMapper.readValue(result.getResponse().getContentAsString(), Map.class);    String refreshToken = tokens.get("refresh_token");    // Now create a new refresh token for Tom based on Toms old access token and send the refresh    // token of Jerry    String accessTokenTom =        "eyJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE1MjYxMzE0MTEsImV4cCI6MTUyNjIxNzgxMSwiYWRtaW4iOiJmYWxzZSIsInVzZXIiOiJUb20ifQ.DCoaq9zQkyDH25EcVWKcdbyVfUL4c9D4jRvsqOqvi9iAd4QuqmKcchfbU8FNzeBNF9tLeFXHZLU4yRkq-bjm7Q";    Map<String, Object> refreshJson = new HashMap<>();    refreshJson.put("refresh_token", refreshToken);    result =        mockMvc            .perform(                MockMvcRequestBuilders.post("/JWT/refresh/newToken")                    .contentType(MediaType.APPLICATION_JSON)                    .header("Authorization", "Bearer " + accessTokenTom)                    .content(objectMapper.writeValueAsString(refreshJson)))            .andExpect(status().isOk())            .andReturn();    tokens = objectMapper.readValue(result.getResponse().getContentAsString(), Map.class);    accessTokenTom = tokens.get("access_token");    // Now checkout with the new token from Tom    mockMvc        .perform(            MockMvcRequestBuilders.post("/JWT/refresh/checkout")                .header("Authorization", "Bearer " + accessTokenTom))        .andExpect(status().isOk())        .andExpect(jsonPath("$.lessonCompleted", is(true)));  }  @Test  void solutionWithAlgNone() throws Exception {    String tokenWithNoneAlgor