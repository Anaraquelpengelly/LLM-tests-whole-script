/* * SPDX-FileCopyrightText: Copyright Â© 2021 WebGoat authors * SPDX-License-Identifier: GPL-2.0-or-later */package org.owasp.webgoat.lessons.spoofcookie;import static org.hamcrest.Matchers.emptyString;import static org.hamcrest.Matchers.not;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.cookie;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;import jakarta.servlet.http.Cookie;import java.util.stream.Stream;import org.hamcrest.CoreMatchers;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.params.ParameterizedTest;import org.junit.jupiter.params.provider.Arguments;import org.junit.jupiter.params.provider.MethodSource;import org.owasp.webgoat.container.plugins.LessonTest;import org.springframework.http.MediaType;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;class SpoofCookieAssignmentTest extends LessonTest {  private static final String COOKIE_NAME = "spoof_auth";  private static final String LOGIN_CONTEXT_PATH = "/SpoofCookie/login";  private static final String ERASE_COOKIE_CONTEXT_PATH = "/SpoofCookie/cleanup";  @Test  @DisplayName("Lesson completed")  void success() throws Exception {    Cookie cookie = new Cookie(COOKIE_NAME, "NjI2MTcwNGI3YTQxNGE1OTU2NzQ2ZDZmNzQ=");    cookie.setSecure(true);    ResultActions result =        mockMvc.perform(            MockMvcRequestBuilders.post(LOGIN_CONTEXT_PATH)                .cookie(cookie)                .param("username", "")                .param("password", ""));    result.andExpect(status().isOk());    result.andExpect(jsonPath("$.lessonCompleted", CoreMatchers.is(true)));  }  @Test  @DisplayName("Valid credentials login without authentication cookie")  void validLoginWithoutCookieTest() throws Exception {    String username = "webgoat";    String password = "webgoat";    ResultActions result =        mockMvc.perform(            MockMvcRequestBuilders.post(LOGIN_CONTEXT_PATH)                .param("username", username)                .param("password", password));    result.andExpect(status().isOk());    result.andExpect(jsonPath("$.lessonCompleted", CoreMatchers.is(false)));    result.andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE));    result.andExpect(cookie().value(COOKIE_NAME, not(emptyString())));  }  @ParameterizedTest  @MethodSource("providedCookieValues")  @DisplayName(      "Tests different invalid/valid -but not solved- cookie flow scenarios: "          + "1.- Invalid encoded cookie sent. "          + "2.- Valid cookie login (not tom) sent. "          + "3.- Valid cookie with not known username sent ")  void cookieLoginNotSolvedFlow(String cookieValue) throws Exception {    Cookie cookie = new Cookie(COOKIE_NAME, cookieValue);    cookie.setSecure(true);    mockMvc        .perform(            MockMvcRequestBuilders.post(LOGIN_CONTEXT_PATH)                .cookie(cookie)                .param("username", "")                .param("password", ""))        .andExpect(jsonPath("$.lessonCompleted", CoreMatchers.is(false)));  }  @Test  @DisplayName("UnsatisfiedServletRequestParameterException test for missing username")  void invalidLoginWithUnsatisfiedServletRequestParameterExceptionOnUsernameMissing()      throws Exception {    mockMvc        .perform(MockM